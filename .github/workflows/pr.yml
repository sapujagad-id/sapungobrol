name: PR Quality Checks

on:
  pull_request:
    branches:
      - "*"

jobs:
  test:
    name: Run tests
    runs-on: ubuntu-24.04
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432
    steps:
      - name: Checkout Sources
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11.10"

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Setup coverage and pytest
        run: pip install coverage pytest

      - name: Get list of changed migration files
        id: migration-changes-list
        uses: dorny/paths-filter@v3
        with:
          filters: |
            changed:
              - 'migrations/**'
          list-files: json

      - name: Get number of changed migration files
        id: migration-changes
        run: |
          MIGRATION_CHANGES_LIST='${{ steps.migration-changes-list.outputs.changed_files }}'
          MIGRATION_CHANGES_COUNT=$(echo $MIGRATION_CHANGES_LIST | jq length)
          echo "count=$MIGRATION_CHANGES_COUNT" >> "$GITHUB_OUTPUT"

      - name: Setup Atlas
        uses: ariga/setup-atlas@v0

      - name: Lint migration files
        if: ${{ steps.migration-changes.outputs.count > 0 }}
        run: atlas migrate lint --dir file://migrations --dev-url postgres://postgres:postgres@localhost:5433/postgres?sslmode=disable --latest ${{ steps.migration-changes.outputs.count }}

      - name: Run migrations
        run: atlas migrate apply --url postgres://postgres:postgres@localhost:5433/postgres?sslmode=disable

      - name: Run test and get coverage
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: coverage run -m pytest && coverage xml

      - name: Scan code and upload coverage to Sonarcloud
        uses: SonarSource/sonarcloud-github-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
