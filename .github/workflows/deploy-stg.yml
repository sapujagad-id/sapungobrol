name: Deploy to Staging

env:
  # Deployment variables
  CONFIG_DIR: infra/stg
  DEPLOY_DIR: sapungobrol
  ENV: ${{ secrets.STG_ENV }}
  DATABASE_MIGRATE_URL: ${{ secrets.STG_DATABASE_MIGRATE_URL }}
  # VM variables
  HOST: ${{ vars.STG_SSH_HOST }}
  PORT: ${{ vars.STG_SSH_PORT }}
  USER: ${{ vars.STG_SSH_USER }}
  KEYNAME: ${{ vars.STG_SSH_KEYNAME }}
  KEY: ${{ secrets.STG_SSH_KEY }}

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  test:
    name: Run tests
    runs-on: ubuntu-24.04
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432
    steps:
      - name: Checkout Sources
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11.10"

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Setup coverage and pytest
        run: pip install coverage pytest

      - name: Get list of changed migration files
        id: migration-changes-list
        uses: dorny/paths-filter@v3
        with:
          filters: |
            changed:
              - 'migrations/**'
          list-files: json

      - name: Get number of changed migration files
        id: migration-changes
        run: |
          MIGRATION_CHANGES_LIST='${{ steps.migration-changes-list.outputs.changed_files }}'
          MIGRATION_CHANGES_COUNT=$(echo $MIGRATION_CHANGES_LIST | jq length)
          echo "count=$MIGRATION_CHANGES_COUNT" >> "$GITHUB_OUTPUT"

      - name: Setup Atlas
        uses: ariga/setup-atlas@v0

      - name: Lint migration files
        if: ${{ steps.migration-changes.outputs.count > 0 }}
        run: atlas migrate lint --dir file://migrations --dev-url postgres://postgres:postgres@localhost:5433/postgres?sslmode=disable --latest ${{ steps.migration-changes.outputs.count }}

      - name: Run migrations
        run: atlas migrate apply --url postgres://postgres:postgres@localhost:5433/postgres?sslmode=disable

      - name: Run test and get coverage
        run: coverage run -m pytest && coverage xml --rcfile pyproject.toml

      - name: Scan code and upload coverage to Sonarcloud
        uses: SonarSource/sonarcloud-github-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build:
    name: Build and push Docker image
    needs: [test]
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout Sources
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ vars.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ vars.DOCKERHUB_USER }}/sapungobrol
          tags: |
            type=raw,value=latest
            type=sha

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          platforms: linux/amd64

  deploy:
    name: Deploy image to machine
    needs: [build]
    runs-on: ubuntu-24.04
    steps:
      - name: Connect to ZeroTier
        uses: zerotier/github-action@v1.0.1
        with:
          network_id: ${{ secrets.ZEROTIER_NETWORK_ID }}
          auth_token: ${{ secrets.ZEROTIER_CENTRAL_TOKEN }}

      - name: Ping ZeroTier host
        shell: bash
        run: |
          count=60 # 1 minute
          while ! ping -c 1 ${{ secrets.ZEROTIER_HOST_IP }} ; do
            echo "Waiting..." ;
            sleep 1 ;
            let count=count-1
          done

          if [ $count -eq 0 ]; then
            echo "Failed to ping host"
            exit 1
          fi

          echo "Ping success!"

      - name: Checkout Sources
        uses: actions/checkout@v4

      - name: Read env file
        run: echo ${{ env.ENV }} | base64 -di >> ${{ env.CONFIG_DIR }}/.env

      - name: Setup known hosts
        id: known-hosts
        run: |
          KNOWN_HOSTS=$(ssh-keyscan -H ${{ env.HOST }})
          echo "known_hosts=$KNOWN_HOSTS" >> "$GITHUB_OUTPUT"

      - name: Register SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ env.KEY }}
          name: ${{ env.KEYNAME }}
          known_hosts: ${{ steps.known-hosts.outputs.known_hosts }}
          if_key_exists: replace
          config: |
            Host ${{ env.HOST }}
              HostName ${{ env.HOST }}
              User ${{ env.USER }}
              Port ${{ env.PORT }}
              IdentityFile ~/.ssh/${{ env.KEYNAME }}
              ServerAliveInterval 15

      - name: Move deployment configuration
        run: rsync -avrz --progress ${{ env.CONFIG_DIR }}/ ${{ env.HOST }}:${{ env.DEPLOY_DIR }}

      - name: Run any setup script
        run: |
          ssh ${{ env.HOST }} "
            cd ${{ env.DEPLOY_DIR }}
            if [ -f "setup.sh" ]; then
              chmod +x setup.sh && ./setup.sh
            fi
          "

      - name: Run containers based on docker compose
        run: |
          ssh ${{ env.HOST }} 'sudo bash -c "cd ${{ env.DEPLOY_DIR }}; docker compose pull; docker compose down; docker compose up -d"'

      - name: Setup Atlas
        uses: ariga/setup-atlas@v0

      - name: Apply database migrations
        run: atlas migrate apply --url ${{ env.DATABASE_MIGRATE_URL }}
